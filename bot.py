from web3 import Web3
import telebot
import os
import json 
from PIL import Image, ImageDraw
from qrcode.image.styles.moduledrawers.pil import RoundedModuleDrawer
from qrcode.image.styledpil import StyledPilImage
from qrcode.image.styles.colormasks import VerticalGradiantColorMask
import PIL
import qrcode

infura_url = 
web3 = Web3(Web3.HTTPProvider(infura_url))
private_key = 
my_address = 
royaltyaddress = 
chainId = 1337
nonce = web3.eth.get_transaction_count(my_address)


online = web3.is_connected()

BOT_TOKEN = os.environ['BOT_TOKEN']
bot = telebot.TeleBot(BOT_TOKEN)

class handshakeaddresses:
	def __init__(self, name):
        	self.name = name
	def setcontractaddress(self, contractaddress):
		self.contractaddress = contractaddress
	def setbartereraddress(self, bartereraddress):
		self.bartereraddress = bartereraddress
	def getcontractaddress(self):
		return(self.contractaddress)
	def getbartereraddress(self):
		return(self.bartereraddress)
	pass

class customer:
	def __init__(self, name):
        	self.name = name
	def setaddress(self, address):
		self.address = address
	def getaddress(self):
		return(self.address)
	pass

class paygateway:
	def __init__(self, name):
        	self.name = name
	def setaddress(self, address):
		self.address = address
	def getaddress(self):
		return(self.address)
	def getabi(self):
		gatewayabi = json.loads('''[
	{
		"inputs": [
			{
				"internalType": "address[]",
				"name": "payees",
				"type": "address[]"
			},
			{
				"internalType": "uint256[]",
				"name": "shares_",
				"type": "uint256[]"
			}
		],
		"stateMutability": "payable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "contract IERC20",
				"name": "token",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "ERC20PaymentReleased",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "address",
				"name": "account",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "shares",
				"type": "uint256"
			}
		],
		"name": "PayeeAdded",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "PaymentReceived",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "PaymentReleased",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "index",
				"type": "uint256"
			}
		],
		"name": "payee",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "account",
				"type": "address"
			}
		],
		"name": "releasable",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "contract IERC20",
				"name": "token",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "account",
				"type": "address"
			}
		],
		"name": "releasable",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address payable",
				"name": "account",
				"type": "address"
			}
		],
		"name": "release",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "contract IERC20",
				"name": "token",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "account",
				"type": "address"
			}
		],
		"name": "release",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "contract IERC20",
				"name": "token",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "account",
				"type": "address"
			}
		],
		"name": "released",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "account",
				"type": "address"
			}
		],
		"name": "released",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "account",
				"type": "address"
			}
		],
		"name": "shares",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "contract IERC20",
				"name": "token",
				"type": "address"
			}
		],
		"name": "totalReleased",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "totalReleased",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "totalShares",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"stateMutability": "payable",
		"type": "receive"
	}
]''')
		return(gatewayabi)
	def getbytecode(self):
		gatewaybytecode = '6080604052604051620023043803806200230483398181016040528101906200002991906200066b565b8181805182511462000072576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000699062000777565b60405180910390fd5b6000825111620000b9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000b090620007e9565b60405180910390fd5b60005b8251811015620001285762000112838281518110620000e057620000df6200080b565b5b6020026020010151838381518110620000fe57620000fd6200080b565b5b60200260200101516200013360201b60201c565b80806200011f9062000869565b915050620000bc565b505050505062000ae2565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620001a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200019c906200092c565b60405180910390fd5b60008111620001eb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001e2906200099e565b60405180910390fd5b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541462000270576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002679062000a36565b60405180910390fd5b6004829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508060005462000327919062000a58565b6000819055507f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac82826040516200036092919062000ab5565b60405180910390a15050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620003d08262000385565b810181811067ffffffffffffffff82111715620003f257620003f162000396565b5b80604052505050565b6000620004076200036c565b9050620004158282620003c5565b919050565b600067ffffffffffffffff82111562000438576200043762000396565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200047b826200044e565b9050919050565b6200048d816200046e565b81146200049957600080fd5b50565b600081519050620004ad8162000482565b92915050565b6000620004ca620004c4846200041a565b620003fb565b90508083825260208201905060208402830185811115620004f057620004ef62000449565b5b835b818110156200051d57806200050888826200049c565b845260208401935050602081019050620004f2565b5050509392505050565b600082601f8301126200053f576200053e62000380565b5b815162000551848260208601620004b3565b91505092915050565b600067ffffffffffffffff82111562000578576200057762000396565b5b602082029050602081019050919050565b6000819050919050565b6200059e8162000589565b8114620005aa57600080fd5b50565b600081519050620005be8162000593565b92915050565b6000620005db620005d5846200055a565b620003fb565b9050808382526020820190506020840283018581111562000601576200060062000449565b5b835b818110156200062e5780620006198882620005ad565b84526020840193505060208101905062000603565b5050509392505050565b600082601f83011262000650576200064f62000380565b5b815162000662848260208601620005c4565b91505092915050565b6000806040838503121562000685576200068462000376565b5b600083015167ffffffffffffffff811115620006a657620006a56200037b565b5b620006b48582860162000527565b925050602083015167ffffffffffffffff811115620006d857620006d76200037b565b5b620006e68582860162000638565b9150509250929050565b600082825260208201905092915050565b7f5061796d656e7453706c69747465723a2070617965657320616e64207368617260008201527f6573206c656e677468206d69736d617463680000000000000000000000000000602082015250565b60006200075f603283620006f0565b91506200076c8262000701565b604082019050919050565b60006020820190508181036000830152620007928162000750565b9050919050565b7f5061796d656e7453706c69747465723a206e6f20706179656573000000000000600082015250565b6000620007d1601a83620006f0565b9150620007de8262000799565b602082019050919050565b600060208201905081810360008301526200080481620007c2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620008768262000589565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203620008ab57620008aa6200083a565b5b600182019050919050565b7f5061796d656e7453706c69747465723a206163636f756e74206973207468652060008201527f7a65726f20616464726573730000000000000000000000000000000000000000602082015250565b600062000914602c83620006f0565b91506200092182620008b6565b604082019050919050565b60006020820190508181036000830152620009478162000905565b9050919050565b7f5061796d656e7453706c69747465723a20736861726573206172652030000000600082015250565b600062000986601d83620006f0565b915062000993826200094e565b602082019050919050565b60006020820190508181036000830152620009b98162000977565b9050919050565b7f5061796d656e7453706c69747465723a206163636f756e7420616c726561647960008201527f2068617320736861726573000000000000000000000000000000000000000000602082015250565b600062000a1e602b83620006f0565b915062000a2b82620009c0565b604082019050919050565b6000602082019050818103600083015262000a518162000a0f565b9050919050565b600062000a658262000589565b915062000a728362000589565b925082820190508082111562000a8d5762000a8c6200083a565b5b92915050565b62000a9e816200046e565b82525050565b62000aaf8162000589565b82525050565b600060408201905062000acc600083018562000a93565b62000adb602083018462000aa4565b9392505050565b6118128062000af26000396000f3fe6080604052600436106100a05760003560e01c80639852595c116100645780639852595c146101b8578063a3f8eace146101f5578063c45ac05014610232578063ce7c2ac21461026f578063d79779b2146102ac578063e33b7de3146102e9576100bc565b806319165587146100c15780633a98ef39146100ea578063406072a91461011557806348b75044146101525780638b83209b1461017b576100bc565b366100bc57670de0b6b3a76400003410156100ba57600080fd5b005b600080fd5b3480156100cd57600080fd5b506100e860048036038101906100e39190610e25565b610314565b005b3480156100f657600080fd5b506100ff610493565b60405161010c9190610e6b565b60405180910390f35b34801561012157600080fd5b5061013c60048036038101906101379190610f02565b61049c565b6040516101499190610e6b565b60405180910390f35b34801561015e57600080fd5b5061017960048036038101906101749190610f02565b610523565b005b34801561018757600080fd5b506101a2600480360381019061019d9190610f6e565b610736565b6040516101af9190610faa565b60405180910390f35b3480156101c457600080fd5b506101df60048036038101906101da9190610fc5565b61077e565b6040516101ec9190610e6b565b60405180910390f35b34801561020157600080fd5b5061021c60048036038101906102179190610fc5565b6107c7565b6040516102299190610e6b565b60405180910390f35b34801561023e57600080fd5b5061025960048036038101906102549190610f02565b6107fa565b6040516102669190610e6b565b60405180910390f35b34801561027b57600080fd5b5061029660048036038101906102919190610fc5565b6108a9565b6040516102a39190610e6b565b60405180910390f35b3480156102b857600080fd5b506102d360048036038101906102ce9190610ff2565b6108f2565b6040516102e09190610e6b565b60405180910390f35b3480156102f557600080fd5b506102fe61093b565b60405161030b9190610e6b565b60405180910390f35b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610396576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038d906110a2565b60405180910390fd5b60006103a1826107c7565b9050600081036103e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103dd90611134565b60405180910390fd5b80600160008282546103f89190611183565b9250508190555080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506104568282610945565b7fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b0568282604051610487929190611216565b60405180910390a15050565b60008054905090565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116105a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059c906110a2565b60405180910390fd5b60006105b183836107fa565b9050600081036105f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ed90611134565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106459190611183565b9250508190555080600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506106e1838383610a39565b8273ffffffffffffffffffffffffffffffffffffffff167f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a838360405161072992919061123f565b60405180910390a2505050565b60006004828154811061074c5761074b611268565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000806107d261093b565b476107dd9190611183565b90506107f283826107ed8661077e565b610abf565b915050919050565b600080610806846108f2565b8473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161083f9190610faa565b602060405180830381865afa15801561085c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088091906112ac565b61088a9190611183565b90506108a0838261089b878761049c565b610abf565b91505092915050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600154905090565b80471015610988576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097f90611325565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16826040516109ae90611376565b60006040518083038185875af1925050503d80600081146109eb576040519150601f19603f3d011682016040523d82523d6000602084013e6109f0565b606091505b5050905080610a34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2b906113fd565b60405180910390fd5b505050565b610aba8363a9059cbb60e01b8484604051602401610a5892919061123f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610b2d565b505050565b600081600054600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485610b10919061141d565b610b1a919061148e565b610b2491906114bf565b90509392505050565b6000610b8f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610bf59092919063ffffffff16565b9050600081511480610bb1575080806020019051810190610bb0919061152b565b5b610bf0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be7906115ca565b60405180910390fd5b505050565b6060610c048484600085610c0d565b90509392505050565b606082471015610c52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c499061165c565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610c7b91906116e2565b60006040518083038185875af1925050503d8060008114610cb8576040519150601f19603f3d011682016040523d82523d6000602084013e610cbd565b606091505b5091509150610cce87838387610cda565b92505050949350505050565b60608315610d3c576000835103610d3457610cf485610d4f565b610d33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2a90611745565b60405180910390fd5b5b829050610d47565b610d468383610d72565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610d855781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db991906117ba565b60405180910390fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610df282610dc7565b9050919050565b610e0281610de7565b8114610e0d57600080fd5b50565b600081359050610e1f81610df9565b92915050565b600060208284031215610e3b57610e3a610dc2565b5b6000610e4984828501610e10565b91505092915050565b6000819050919050565b610e6581610e52565b82525050565b6000602082019050610e806000830184610e5c565b92915050565b6000610e9182610dc7565b9050919050565b6000610ea382610e86565b9050919050565b610eb381610e98565b8114610ebe57600080fd5b50565b600081359050610ed081610eaa565b92915050565b610edf81610e86565b8114610eea57600080fd5b50565b600081359050610efc81610ed6565b92915050565b60008060408385031215610f1957610f18610dc2565b5b6000610f2785828601610ec1565b9250506020610f3885828601610eed565b9150509250929050565b610f4b81610e52565b8114610f5657600080fd5b50565b600081359050610f6881610f42565b92915050565b600060208284031215610f8457610f83610dc2565b5b6000610f9284828501610f59565b91505092915050565b610fa481610e86565b82525050565b6000602082019050610fbf6000830184610f9b565b92915050565b600060208284031215610fdb57610fda610dc2565b5b6000610fe984828501610eed565b91505092915050565b60006020828403121561100857611007610dc2565b5b600061101684828501610ec1565b91505092915050565b600082825260208201905092915050565b7f5061796d656e7453706c69747465723a206163636f756e7420686173206e6f2060008201527f7368617265730000000000000000000000000000000000000000000000000000602082015250565b600061108c60268361101f565b915061109782611030565b604082019050919050565b600060208201905081810360008301526110bb8161107f565b9050919050565b7f5061796d656e7453706c69747465723a206163636f756e74206973206e6f742060008201527f647565207061796d656e74000000000000000000000000000000000000000000602082015250565b600061111e602b8361101f565b9150611129826110c2565b604082019050919050565b6000602082019050818103600083015261114d81611111565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061118e82610e52565b915061119983610e52565b92508282019050808211156111b1576111b0611154565b5b92915050565b6000819050919050565b60006111dc6111d76111d284610dc7565b6111b7565b610dc7565b9050919050565b60006111ee826111c1565b9050919050565b6000611200826111e3565b9050919050565b611210816111f5565b82525050565b600060408201905061122b6000830185611207565b6112386020830184610e5c565b9392505050565b60006040820190506112546000830185610f9b565b6112616020830184610e5c565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000815190506112a681610f42565b92915050565b6000602082840312156112c2576112c1610dc2565b5b60006112d084828501611297565b91505092915050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b600061130f601d8361101f565b915061131a826112d9565b602082019050919050565b6000602082019050818103600083015261133e81611302565b9050919050565b600081905092915050565b50565b6000611360600083611345565b915061136b82611350565b600082019050919050565b600061138182611353565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b60006113e7603a8361101f565b91506113f28261138b565b604082019050919050565b60006020820190508181036000830152611416816113da565b9050919050565b600061142882610e52565b915061143383610e52565b925082820261144181610e52565b9150828204841483151761145857611457611154565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061149982610e52565b91506114a483610e52565b9250826114b4576114b361145f565b5b828204905092915050565b60006114ca82610e52565b91506114d583610e52565b92508282039050818111156114ed576114ec611154565b5b92915050565b60008115159050919050565b611508816114f3565b811461151357600080fd5b50565b600081519050611525816114ff565b92915050565b60006020828403121561154157611540610dc2565b5b600061154f84828501611516565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006115b4602a8361101f565b91506115bf82611558565b604082019050919050565b600060208201905081810360008301526115e3816115a7565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061164660268361101f565b9150611651826115ea565b604082019050919050565b6000602082019050818103600083015261167581611639565b9050919050565b600081519050919050565b60005b838110156116a557808201518184015260208101905061168a565b60008484015250505050565b60006116bc8261167c565b6116c68185611345565b93506116d6818560208601611687565b80840191505092915050565b60006116ee82846116b1565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061172f601d8361101f565b915061173a826116f9565b602082019050919050565b6000602082019050818103600083015261175e81611722565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b600061178c82611765565b611796818561101f565b93506117a6818560208601611687565b6117af81611770565b840191505092915050565b600060208201905081810360008301526117d48184611781565b90509291505056fea2646970667358221220b3f513cbff5196e61a90dcccf1f38af4cd22e7dbd80f697d6e595878818dad1e64736f6c63430008120033'
		return(gatewaybytecode)
	pass
	
class bartercontract:
	def __init__(self, name):
        	self.name = name
	def getabi(self):
		barterabi = json.loads('''[
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "previousOwner",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "newOwner",
				"type": "address"
			}
		],
		"name": "OwnershipTransferred",
		"type": "event"
	},
	{
		"inputs": [],
		"name": "clearhandshake",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_addy",
				"type": "address"
			}
		],
		"name": "handshake",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "owner",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "renounceOwnership",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "newOwner",
				"type": "address"
			}
		],
		"name": "transferOwnership",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "verifycontract",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "withdraw",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"stateMutability": "payable",
		"type": "receive"
	}
]''')
		return(barterabi)
	def getbytecode(self):
		barterbytecode = '60806040526001600560006101000a81548160ff02191690831515021790555034801561002b57600080fd5b5061004861003d61004d60201b60201c565b61005560201b60201c565b610119565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610fde806101286000396000f3fe6080604052600436106100745760003560e01c80638c1bfe241161004e5780638c1bfe24146101a85780638da5cb5b146101d1578063aa521d87146101fc578063f2fde38b146102135761014a565b80632a1b065c1461014f5780633ccfd60b1461017a578063715018a6146101915761014a565b3661014a5760026003805490501061008b57600080fd5b600034905080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546100df9190610d46565b925050819055506003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055005b600080fd5b34801561015b57600080fd5b5061016461023c565b6040516101719190610d95565b60405180910390f35b34801561018657600080fd5b5061018f61025b565b005b34801561019d57600080fd5b506101a66109d5565b005b3480156101b457600080fd5b506101cf60048036038101906101ca9190610e13565b6109e9565b005b3480156101dd57600080fd5b506101e6610ac1565b6040516101f39190610e4f565b60405180910390f35b34801561020857600080fd5b50610211610aea565b005b34801561021f57600080fd5b5061023a60048036038101906102359190610e13565b610b02565b005b6000610246610b85565b600560009054906101000a900460ff16905090565b610263610b85565b600115156002600060036000815481106102805761027f610e6a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146102ff57600080fd5b600060016000600360008154811061031a57610319610e6a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600060016000600360018154811061039d5761039c610e6a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006001600060036000815481106104205761041f610e6a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006001600060036001815481106104a4576104a3610e6a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600360008154811061052257610521610e6a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610592573d6000803e3d6000fd5b5060036001815481106105a8576105a7610e6a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610618573d6000803e3d6000fd5b5050506001151560026000600360018154811061063857610637610e6a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146106b757600080fd5b60006001600060036000815481106106d2576106d1610e6a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600060016000600360018154811061075557610754610e6a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006001600060036000815481106107d8576107d7610e6a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600060016000600360018154811061085c5761085b610e6a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060036000815481106108da576108d9610e6a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801561094a573d6000803e3d6000fd5b5060036001815481106109605761095f610e6a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156109d0573d6000803e3d6000fd5b505050565b6109dd610b85565b6109e76000610c03565b565b6006600480549050106109fb57600080fd5b610a03610b85565b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506004819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610af2610b85565b60046000610b009190610ccf565b565b610b0a610b85565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7090610f1c565b60405180910390fd5b610b8281610c03565b50565b610b8d610cc7565b73ffffffffffffffffffffffffffffffffffffffff16610bab610ac1565b73ffffffffffffffffffffffffffffffffffffffff1614610c01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf890610f88565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b5080546000825590600052602060002090810190610ced9190610cf0565b50565b5b80821115610d09576000816000905550600101610cf1565b5090565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d5182610d0d565b9150610d5c83610d0d565b9250828201905080821115610d7457610d73610d17565b5b92915050565b60008115159050919050565b610d8f81610d7a565b82525050565b6000602082019050610daa6000830184610d86565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610de082610db5565b9050919050565b610df081610dd5565b8114610dfb57600080fd5b50565b600081359050610e0d81610de7565b92915050565b600060208284031215610e2957610e28610db0565b5b6000610e3784828501610dfe565b91505092915050565b610e4981610dd5565b82525050565b6000602082019050610e646000830184610e40565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610f06602683610e99565b9150610f1182610eaa565b604082019050919050565b60006020820190508181036000830152610f3581610ef9565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610f72602083610e99565b9150610f7d82610f3c565b602082019050919050565b60006020820190508181036000830152610fa181610f65565b905091905056fea26469706673582212200a10e8ed27f3436ca0e0bb821e8a2b8d1b0eceedef708214e6cec5ef30b234a464736f6c63430008120033'
		return(barterbytecode)
	pass

paymentgateway = paygateway("Est")
bartercontract1 = bartercontract("Est")

gateway = web3.eth.contract(abi=paymentgateway.getabi(), bytecode=paymentgateway.getbytecode())
gatewaycontract = gateway.constructor([my_address, royaltyaddress],[50, 50]).build_transaction({"chainId":chainId, "from":my_address, "nonce":nonce})
signed1 = web3.eth.account.sign_transaction(gatewaycontract, private_key=private_key)
tx_hash = web3.eth.send_raw_transaction(signed1.rawTransaction)
tx_receipt = web3.eth.wait_for_transaction_receipt(tx_hash)
paymentgateway.setaddress(tx_receipt.contractAddress)

qr = qrcode.QRCode(
    	version=4,
    	error_correction=qrcode.constants.ERROR_CORRECT_Q,
    	box_size=10,
    	border=4,
	)
qr.add_data(paymentgateway.getaddress())
qr.make(fit=True)
img = qr.make_image(image_factory=StyledPilImage, module_drawer=RoundedModuleDrawer(), embeded_image_path="polygonlogo.png", fill_color="black", back_color="white").convert('RGBA')
imgname1 = paymentgateway.getaddress()
img.save(f"{imgname1}.png")

@bot.message_handler(commands=['help', 'info', 'start'])
def send_welcome(message):
	photo = open('infographic.jpg', 'rb')
	bot.send_photo(message.chat.id, photo)
	bot.send_message(message.chat.id, """ HOW IT WORKS:\n \n STEP 1: Using the /startbarter command, You will provide a QR-Code of your Polygon Address from any wallet of your choosing then proceed to fulfill the fee. Once the fee has been fulfilled, Barter-Machine will deploy a smart-contract to the Polygon(PoS Network) which can hold collateral in the form of MATIC, from two parties, in escrow. You will get a "Barter-Ticket" which is a QR-Code of the address of the smart-contract that you just paid to have deployed.\n \n STEP 2: Once you have received your "Barter-Ticket" share it with the counterparty of the barter. You and the counterparty may proceed to send any quantity of MATIC to the address in the "Barter-Ticket", where it will be held independently from the two parties until step 3 is complete.\n \n STEP 3: Once both parties are satisfied with the transaction, or have reached a consensus regarding the transaction, they may proceed to use the /handshake command, where they will supply the "Barter-Ticket" and a QR-Code of the Polygon address that they used to send funds to the "Barter-Ticket". Only once both parties have used the /handshake command will the smart-contract release" the escrowed funds back to the parties in their respective quantities.\n \n COMMANDS:\n \n /startbarter \n Start a new barter and get a "Barter-Ticket" \n \n /handshake \n Signify your readiness and consent to complete the transaction and have funds released \n \n /verifyticket \n To avoid scams, verify a "Barter-Ticket" to ensure the legitimacy of your ticket \n \n /generateqr \n Your QR-Code not working? Convert your address into a QR guaranteed to work with Barter-Machine \n\n\n\n Need MATIC? Here's a list of providers:\n \n \n Need a Wallet? Here's a list of wallets:\n """ )
	

@bot.message_handler(commands=['startbarter'])
def deployescow(message):
	msg1 = bot.send_message(message.chat.id, "In order for Barter-Machine to know which Telegram User(YOU) to send the Barter-Ticket to upon fulfillment, It is necessary to provide a QR Code of your Polygon(PoS) Address in response to this message PRIOR to fulfllment.\n \n***FAILURE to provide a VALID address WILL result in NO Barter-Ticket and potentially LOST FUNDS***")

	bot.register_next_step_handler(msg1, PayGate)
	
customer1 = customer("First")

def PayGate(message):
	from telebot import types
	import cv2
	from PIL import Image, ImageDraw
	from qrcode.image.styles.moduledrawers.pil import RoundedModuleDrawer
	from qrcode.image.styledpil import StyledPilImage
	from qrcode.image.styles.colormasks import VerticalGradiantColorMask
	import PIL
	import json
	import qrcode
	try:
		detector = cv2.QRCodeDetector()
		file_id = message.photo[-1].file_id
		newfile = bot.get_file(file_id)
		downloaded_file = bot.download_file(newfile.file_path)
		with open(f"{file_id}.jpg", 'wb') as new_file:
			new_file.write(downloaded_file)
		img = cv2.imread(f"{file_id}.jpg")
		data, bbox, straight_qrcode = detector.detectAndDecode(img)
		datalength = len(data)
		if (datalength != 42): 
			bot.send_message(message.chat.id, "Invalid Input, Please try again with the /startbarter command and a valid QR Code of your Polygon address")
		else:
			customer1.setaddress(data)
		
	except: 
		bot.send_message(message.chat.id, "Invalid Input, Please try again with the /startbarter command and a valid QR Code of your Polygon address")
	customeraddy = customer1.getaddress()
	bot.send_message(message.chat.id, f"Awaiting Payment From:\n \n{customeraddy}")
	
	gatewayaddy = paymentgateway.getaddress()
	bot.send_message(message.chat.id, f"Within the Next 10 Minutes, Please Send the Fee Amount to the Following Address. \n \nFee Amount: 1 MATIC \n \nAddress: {gatewayaddy}") 
	
	photo1 = open(f'{gatewayaddy}.png', 'rb')
	bot.send_photo(message.chat.id, photo1)

	paid = 0

	while(paid < 1):
		block = web3.eth.get_block('latest')
		WETH_ADDRESS = paymentgateway.getaddress()
		for tx_hash in block.transactions:
			tx = web3.eth.get_transaction(tx_hash)
			if tx['to'] == WETH_ADDRESS:
				if tx['from'] == customer1.getaddress():
					bot.send_message(message.chat.id, "Success, Thank you for using Barter-Machine to help facilitate your barter. Your Barter-Ticket can be found below. Save it and share with the counter-party")
					nonce1 = web3.eth.get_transaction_count(my_address)
					gateway1 = web3.eth.contract(address=paymentgateway.getaddress(),abi=paymentgateway.getabi())
					gateway1transaction = gateway1.functions.release(my_address).build_transaction({"chainId":chainId, "from":my_address, "nonce":nonce1})
					gateway1signed = web3.eth.account.sign_transaction(gateway1transaction, private_key=private_key)
					web3.eth.send_raw_transaction(gateway1signed.rawTransaction)
					
					nonce2 = web3.eth.get_transaction_count(my_address)
					gateway1transaction2 = gateway1.functions.release(royaltyaddress).build_transaction({"chainId":chainId, "from":my_address, "nonce":nonce2})
					gateway1signedT2 = web3.eth.account.sign_transaction(gateway1transaction2, private_key=private_key)
					web3.eth.send_raw_transaction(gateway1signedT2.rawTransaction)
					
					nonce3 = web3.eth.get_transaction_count(my_address)
					barter = web3.eth.contract(abi=bartercontract1.getabi(), bytecode=bartercontract1.getbytecode())
					bartercontract = barter.constructor().build_transaction({"chainId":chainId, "from":my_address, "nonce":nonce3})
					signedbartercontract = web3.eth.account.sign_transaction(bartercontract, private_key=private_key)
					tx_hash1 = web3.eth.send_raw_transaction(signedbartercontract.rawTransaction)
					tx_receipt1 = web3.eth.wait_for_transaction_receipt(tx_hash1)
					address1 = tx_receipt1.contractAddress
		
					if not hasattr(PIL.Image, 'Resampling'):
						PIL.Image.Resampling = PIL.Image
	
					qr = qrcode.QRCode(
    					version=4,
    					error_correction=qrcode.constants.ERROR_CORRECT_Q,
    					box_size=10,
    					border=4,
					)
					qr.add_data(address1)
					qr.make(fit=True)
					img = qr.make_image(image_factory=StyledPilImage, module_drawer=RoundedModuleDrawer(), embeded_image_path="handshake.png", fill_color="black", back_color="white").convert('RGB')
					img.save(f"{address1}.png")
	
					photo = open(f'{address1}.png', 'rb')
					bot.send_photo(message.chat.id, photo)
					
					paid = 1
					break
	
@bot.message_handler(commands=['handshake'])
def handshake(message):		
	from telebot import types
	msg1 = bot.send_message(message.chat.id, "Submit Barter-Ticket(QR-Code):")
	bot.register_next_step_handler(msg1, QRScan)
	
addresses = handshakeaddresses("Bart")
	
def QRScan(message):
	from telebot import types
	import cv2
	detector = cv2.QRCodeDetector()
	file_id = message.photo[-1].file_id
	newfile = bot.get_file(file_id)
	downloaded_file = bot.download_file(newfile.file_path)
	with open(f"{file_id}.jpg", 'wb') as new_file:
		new_file.write(downloaded_file)
	img = cv2.imread(f"{file_id}.jpg")
	data, bbox, straight_qrcode = detector.detectAndDecode(img)
	addresses.setcontractaddress(data)
	msg2 = bot.send_message(message.chat.id, "Submit Address QR-Code")
	bot.register_next_step_handler(msg2, QRScan2)
	

def QRScan2(message):
	from telebot import types
	from web3 import Web3
	import cv2
	import json
	markup = types.ForceReply(selective=False)
	detector = cv2.QRCodeDetector()
	file_id = message.photo[-1].file_id
	newfile = bot.get_file(file_id)
	downloaded_file = bot.download_file(newfile.file_path)
	with open(f"{file_id}.jpg", 'wb') as new_file:
		new_file.write(downloaded_file)
	img = cv2.imread(f"{file_id}.jpg")
	data, bbox, straight_qrcode = detector.detectAndDecode(img)
	addresses.setbartereraddress(data)
	testing = addresses.getcontractaddress()
	bot.send_message(message.chat.id, f"{testing}")
	
	
	bart = web3.eth.contract(address=addresses.getcontractaddress(),abi=bartercontract1.getabi())
	nonce1 = web3.eth.get_transaction_count(my_address)
	handshaketransaction = bart.functions.handshake(addresses.getbartereraddress()).build_transaction({"chainId":chainId, "from":my_address, "nonce":nonce1})
	signedhandshake = web3.eth.account.sign_transaction(handshaketransaction, private_key=private_key)
	web3.eth.send_raw_transaction(signedhandshake.rawTransaction)
	
	try:
		nonce2 = web3.eth.get_transaction_count(my_address)
		withdrawtransaction = bart.functions.withdraw().build_transaction({"chainId":chainId, "from":my_address, "nonce":nonce2})
		signedwithdraw = web3.eth.account.sign_transaction(withdrawtransaction, private_key=private_key) 
		web3.eth.send_raw_transaction(signedwithdraw.rawTransaction)
		bot.send_message(message.chat.id, "Funds have been returned to both parties")
	except:
		bot.send_message(message.chat.id, "Awaiting counterparty handshake to release funds")

@bot.message_handler(commands=['ticketbalance'])
def checkbalance(message):		
	from telebot import types
	msg1 = bot.send_message(message.chat.id, "Submit Barter-Ticket(QR-Code):")
	bot.register_next_step_handler(msg1, QRScan22)
	
def QRScan22(message):
	from telebot import types
	import cv2
	detector = cv2.QRCodeDetector()
	file_id = message.photo[-1].file_id
	newfile = bot.get_file(file_id)
	downloaded_file = bot.download_file(newfile.file_path)
	with open(f"{file_id}.jpg", 'wb') as new_file:
		new_file.write(downloaded_file)
	img = cv2.imread(f"{file_id}.jpg")
	data, bbox, straight_qrcode = detector.detectAndDecode(img)
	datalength1 = len(data)
	if (datalength1 != 42): 
		bot.send_message(message.chat.id, "Invalid Input, Please try again with the /startbarter command and a valid QR Code of your Polygon address")
	else:
		balance = web3.eth.get_balance(data)/10**18
		bot.send_message(message.chat.id, f"The Barter-Ticket is holding:\n \n{balance} MATIC")	


@bot.message_handler(commands=['verifyticket'])
def verify(message):		
	from telebot import types
	msg1 = bot.send_message(message.chat.id, "Submit Barter-Ticket(QR-Code):")
	bot.register_next_step_handler(msg1, QRScan11)
	
def QRScan11(message):
	from telebot import types
	import cv2
	detector = cv2.QRCodeDetector()
	file_id = message.photo[-1].file_id
	newfile = bot.get_file(file_id)
	downloaded_file = bot.download_file(newfile.file_path)
	with open(f"{file_id}.jpg", 'wb') as new_file:
		new_file.write(downloaded_file)
	img = cv2.imread(f"{file_id}.jpg")
	data, bbox, straight_qrcode = detector.detectAndDecode(img)
	datalength2 = len(data)
	if (datalength2 != 42): 
			bot.send_message(message.chat.id, "Invalid Input, Please try again with the /verifyticket command and a valid QR-Code")
	else:
		try:
			
			verify = web3.eth.contract(address=data, abi=bartercontract1.getabi())
			status = verify.functions.verifycontract().call()
		
		except:
			bot.send_message(message.chat.id, "The Barter-Ticket is not legitimate")	

@bot.message_handler(commands=['generateqr'])
def send_welcome(message):
	msg1 = bot.send_message(message.chat.id, "Submit Polygon Address")
	bot.register_next_step_handler(msg1, QRScan)

bot.infinity_polling()
